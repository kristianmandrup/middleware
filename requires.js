// Generated by LiveScript 1.2.0
(function(){
  var _, underscore, fullPath, testPath, mwPath, runnerPath, slice$ = [].slice;
  require('sugar');
  _ = require('prelude-ls');
  underscore = function(){
    var items, strings;
    items = slice$.call(arguments);
    items = items.flatten();
    strings = items.map(function(item){
      return String(item);
    });
    return _.map(function(it){
      return it.underscore();
    }, strings);
  };
  fullPath = function(base){
    var paths, upaths;
    paths = slice$.call(arguments, 1);
    upaths = underscore.apply(null, paths);
    return ['.', base, upaths].flatten().join('/');
  };
  testPath = function(){
    var paths;
    paths = slice$.call(arguments);
    return fullPath.apply(null, ['test'].concat(slice$.call(paths)));
  };
  mwPath = function(){
    var paths;
    paths = slice$.call(arguments);
    return fullPath.apply(null, ['mw'].concat(slice$.call(paths)));
  };
  runnerPath = function(){
    var paths;
    paths = slice$.call(arguments);
    return fullPath.apply(null, ['runner'].concat(slice$.call(paths)));
  };
  module.exports = {
    test: function(){
      var paths;
      paths = slice$.call(arguments);
      return require(testPath.apply(null, paths));
    },
    mv: function(){
      var paths;
      paths = slice$.call(arguments);
      return require(mvPath.apply(null, paths));
    },
    runner: function(){
      var paths;
      paths = slice$.call(arguments);
      return require(runnerPath.apply(null, paths));
    },
    fixture: function(path){
      return this.test('fixtures', path);
    },
    fix: function(path){
      return this.fixture(path);
    },
    factory: function(path){
      return this.test('factories', path);
    },
    fac: function(path){
      return this.factory(path);
    },
    file: function(path){
      var p;
      p = fullPath('.', path);
      return require(p);
    },
    m: function(path){
      return this.file(path);
    },
    files: function(){
      var paths;
      paths = slice$.call(arguments);
      return paths.flatten().map(function(path){
        return this.file(path);
      });
    },
    fixtures: function(){
      var paths;
      paths = slice$.call(arguments);
      return paths.flatten().map(function(path){
        return this.fixture(path);
      });
    },
    tests: function(){
      var paths;
      paths = slice$.call(arguments);
      return paths.flatten().map(function(path){
        return this.test(path);
      });
    }
  };
}).call(this);

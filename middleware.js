// Generated by LiveScript 1.2.0
(function(){
  var requires, _, lo, Debugger, BaseRunner, MiddlewareRegistry, Middleware;
  requires = require('./requires');
  _ = require('prelude-ls');
  lo = require('lodash');
  require('sugar');
  Debugger = requires.file('debugger');
  BaseRunner = requires.file('runner/base_runner');
  MiddlewareRegistry = requires.file('mw/registry');
  module.exports = Middleware = (function(){
    Middleware.displayName = 'Middleware';
    var prototype = Middleware.prototype, constructor = Middleware;
    importAll$(prototype, arguments[0]);
    function Middleware(context){
      var ctx, name, runnerClass;
      this.context = context;
      if (_.isType('String', this.context)) {
        if (_.isType('Object', _.last(arguments))) {
          ctx = _.last(arguments);
        }
        name = this.context;
        runnerClass = constructor.getRegistered(name);
        this.context = {
          runner: new runnerClass(ctx)
        };
      }
      if (!_.isType('Object', this.context)) {
        throw Error("Context must be an Object, was: " + typeof this.context + ", " + this.context);
      }
      this.runner = this.context.runner;
      this.runner || (this.runner = constructor.defaultRunner(this.context));
      this.registry = this.runner.registry;
    }
    Middleware.defaultRunner = function(context){
      return new BaseRunner(context);
    };
    prototype.use = function(){
      this.runner.use(_.values(arguments).flatten());
      return this;
    };
    prototype.results = function(){
      return this.runner.results;
    };
    prototype.run = function(ctx){
      this.clean();
      this.debug('run', ctx);
      return this.runner.run(ctx);
    };
    prototype.clean = function(){
      return this.runner.clean();
    };
    prototype.clear = function(){
      return this.clean();
    };
    Middleware.getRegistered = function(name){
      if (!constructor.runners[name]) {
        throw Error("No such pre-registered runner " + name + ", must be one of: " + constructor.runners);
      }
      return constructor.runners[name];
    };
    Middleware.runners = {};
    Middleware.register = function(runners){
      if (!_.isType('Object', runners)) {
        throw Error("to register runners pass a runners hash, was: " + runners);
      }
      return constructor.runners = runners;
    };
    return Middleware;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

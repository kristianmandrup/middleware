// Generated by LiveScript 1.2.0
(function(){
  var _, requires, Debugger, BaseMw;
  _ = require('prelude-ls');
  requires = require('../requires');
  require('sugar');
  Debugger = requires.file('debugger');
  module.exports = BaseMw = (function(){
    BaseMw.displayName = 'BaseMw';
    var prototype = BaseMw.prototype, constructor = BaseMw;
    importAll$(prototype, arguments[0]);
    function BaseMw(context){
      this.context = context;
      this.context || (this.context = {});
      this.setRunner();
      this.setName();
    }
    prototype.clean = function(){
      return this.context = {};
    };
    prototype.init = function(){
      return this.result = void 8;
    };
    prototype.setRunner = function(){
      if (this.context.runner != null && this.context.runner.runMw != null) {
        return this.runner = this.context.runner;
      }
    };
    prototype.setName = function(){
      if (_.isType('String', this.context.name)) {
        this.name = this.context.name;
      }
      return this.name || (this.name = this.constructor.displayName.dasherize());
    };
    prototype.error = function(msg){
      return this.runner.error(msg);
    };
    prototype.abort = function(){
      return this.runner.abort();
    };
    prototype.aborted = function(){
      return this.runner.aborted;
    };
    prototype.lastResult = function(){
      return this.runner.lastResult();
    };
    prototype.resultOf = function(obj){
      return this.runner.resultOf(obj);
    };
    prototype.hasErrors = function(){
      return this.runner.hasErrors();
    };
    prototype.isSuccess = function(){
      return this.runner.isSuccess();
    };
    prototype.isFailure = function(){
      return this.runner.isFailure();
    };
    prototype.failure = function(){
      return this.runner.failure();
    };
    prototype.successful = function(){
      return this.runner.successful();
    };
    prototype.run = function(ctx){
      return true;
    };
    return BaseMw;
  }(Debugger));
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

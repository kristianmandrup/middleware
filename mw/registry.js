// Generated by LiveScript 1.2.0
(function(){
  var requires, _, lo, Debugger, MiddlewareRegistry;
  requires = require('../requires');
  _ = require('prelude-ls');
  lo = require('lodash');
  Debugger = requires.file('debugger');
  module.exports = MiddlewareRegistry = (function(){
    MiddlewareRegistry.displayName = 'MiddlewareRegistry';
    var prototype = MiddlewareRegistry.prototype, constructor = MiddlewareRegistry;
    importAll$(prototype, arguments[0]);
    function MiddlewareRegistry(){
      this.middlewares = {};
      this.map = {};
    }
    prototype.middlewareList = function(){
      return _.values(this.middlewares);
    };
    prototype.get = function(name){
      return this.middlewares[name];
    };
    prototype.getMapped = function(mwName){
      var regName;
      regName = this.map[mwName];
      if (!this.middlewares[regName]) {
        throw Error("No middleware named " + mwName + " has been registered in this registry: " + this);
      }
      return this.middlewares[regName];
    };
    prototype.at = function(index){
      if (this.middlewareList().length === 0) {
        return;
      }
      return this.middlewareList()[index];
    };
    prototype.clean = function(){
      return this.middlewares = {};
    };
    prototype.register = function(middleware, name){
      this.debug('register', middleware);
      name || (name = middleware.name);
      if (!(_.isType('Object', middleware) && middleware.run != null)) {
        console.log("middleware", middleware);
        throw Error("Middleware component must be an Object with a run method, was: " + middleware);
      }
      this.map[middleware.name] = name;
      this.middlewares[name] = middleware;
      return this.debug('registered', name);
    };
    return MiddlewareRegistry;
  }(Debugger));
  lo.extend(MiddlewareRegistry, Debugger);
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);

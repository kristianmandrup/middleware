// Generated by LiveScript 1.2.0
(function(){
  var _, requires, BaseRunner, BaseMw, PromiseMw;
  _ = require('prelude-ls');
  requires = require('../../../requires');
  requires.test('test_setup');
  BaseRunner = requires.file('runner/base_runner');
  BaseMw = requires.file('mw/base_mw');
  PromiseMw = (function(superclass){
    var prototype = extend$((import$(PromiseMw, superclass).displayName = 'PromiseMw', PromiseMw), superclass).prototype, constructor = PromiseMw;
    function PromiseMw(ctx){
      this.ctx = ctx;
      PromiseMw.superclass.apply(this, arguments);
    }
    prototype.run = function(){
      this.result = true;
    };
    return PromiseMw;
  }(BaseMw));
  describe('base runner', function(){
    var runner, baseMw, baseRunner, promiseMw, runners, mw, doneFun;
    baseMw = function(ctx){
      return new BaseMw(ctx);
    };
    baseRunner = function(ctx){
      return new BaseRunner(ctx);
    };
    promiseMw = function(ctx){
      return new PromiseMw(ctx);
    };
    runners = {};
    mw = {};
    doneFun = function(){
      return 'done :)';
    };
    context('my runner', function(){
      before(function(){
        mw.promise = promiseMw();
        runners.my = baseRunner({
          collection: 'users'
        });
        runners.my.use({
          promise: mw.promise
        });
        runners.my.debugOn();
        return runners.my.run({
          model: 'post'
        });
      });
      specify('should have true promise result', function(){
        return runners.my.results.promise.should.be['true'];
      });
      return describe('smart-merge', function(){
        var res;
        before(function(){
          res = runners.my.smartMerge({
            data: 'yeah'
          });
          return console.log(res);
        });
        specify('keeps data', function(){
          return res.data.should.eql('yeah');
        });
        return specify('keeps collection', function(){
          return res.context.collection.should.eql('users');
        });
      });
    });
    context('no custom done function', function(){
      before(function(){
        runners.base = baseRunner();
        return runners.base.clean();
      });
      specify('should be a BaseRunner', function(){
        return runners.base.constructor.should.be.eql(BaseRunner);
      });
      describe('should have assigned default on-success function', function(){
        specify('success is true', function(){
          return runners.base.onSuccess().success.should.be['true'];
        });
        specify('no errors', function(){
          return runners.base.onSuccess().errors.should.eql({});
        });
        return specify('no results', function(){
          return runners.base.onSuccess().results.should.eql({});
        });
      });
      describe('results', function(){
        return specify('should be empty', function(){
          return runners.base.results.should.eql({});
        });
      });
      describe('middlewares', function(){
        return specify('should be empty', function(){
          return runners.base.middlewares().should.eql({});
        });
      });
      return describe('middleware-list', function(){
        return specify('should be empty', function(){
          return runners.base.middlewareList().should.eql([]);
        });
      });
    });
    context('custom done function', function(){
      before(function(){
        return runners.base = baseRunner({
          onSuccess: doneFun
        });
      });
      specify('should have assigned done-fun function', function(){
        return runners.base.onSuccess().should.eql(doneFun());
      });
      return describe('use', function(){
        var registry;
        context('using simple mw', function(){
          before(function(){
            mw.base = baseMw();
            runners.base = baseRunner({
              onSuccess: doneFun
            });
            runners.base.use(mw.base);
            return registry = runners.base.registry;
          });
          return describe('registered component', function(){
            specify('in registry middleware list', function(){
              return registry.middlewareList()[0].should.eql(mw.base);
            });
            return specify('in middlewares by name', function(){
              return registry.middlewares[mw.base.name].should.eql(mw.base);
            });
          });
        });
        context('using hash of mw-components', function(){
          var results;
          before(function(){
            mw.base = baseMw();
            mw['super'] = baseMw({
              name: 'super-duper'
            });
            runners.base = baseRunner({
              onSuccess: doneFun
            });
            runners.base.use({
              basic: mw.base,
              'super': mw['super']
            });
            registry = runners.base.registry;
            runners.base.run();
            return results = runners.base.results;
          });
          describe('registry', function(){
            return describe('registered mw-components', function(){
              specify('should have basic BaseMw component', function(){
                return registry.get('basic').should.eql(mw.base);
              });
              return specify('should have super BaseMw component', function(){
                return registry.get('super').should.eql(mw['super']);
              });
            });
          });
          return describe('results', function(){
            specify('has basic result', function(){
              return results['basic'].should.be['true'];
            });
            return specify('has super result', function(){
              return results['super'].should.be['true'];
            });
          });
        });
        context('using chain of mw-components', function(){
          before(function(){
            mw.base = baseMw();
            mw['super'] = baseMw({
              name: 'super-duper'
            });
            runners.base = baseRunner({
              onSuccess: doneFun
            });
            runners.base.use(mw.base).use(mw['super']);
            return registry = runners.base.registry;
          });
          return describe('registry', function(){
            return describe('registered mw-components', function(){
              specify('should have basic BaseMw components in register', function(){
                return registry.get('base-mw').should.eql(mw.base);
              });
              return specify('should have super BaseMw components in register', function(){
                return registry.get('super-duper').should.eql(mw['super']);
              });
            });
          });
        });
        return context('using list of mw-components', function(){
          before(function(){
            mw.base = baseMw();
            mw['super'] = baseMw({
              name: 'super-duper'
            });
            runners.base = baseRunner({
              onSuccess: doneFun
            });
            runners.base.use(mw.base, mw['super']);
            return registry = runners.base.registry;
          });
          return describe('registry', function(){
            return describe('registered mw-components', function(){
              specify('should have basic BaseMw components in register', function(){
                return registry.get('base-mw').should.eql(mw.base);
              });
              return specify('should have super BaseMw components in register', function(){
                return registry.get('super-duper').should.eql(mw['super']);
              });
            });
          });
        });
      });
    });
    return context('data and custom done function', function(){
      before(function(){
        runners.base = baseRunner({
          data: 'hello',
          onSuccess: doneFun
        });
        mw.base = baseMw();
        return runners.base.use(mw.base);
      });
      describe('middleware-list', function(){
        specify('should have 1 component', function(){
          return runners.base.middlewareList().length.should.eql(1);
        });
        return specify('should have BaseMw component', function(){
          return runners.base.middlewareList().should.not.eql([]);
        });
      });
      describe('index', function(){
        return specify('should be 0', function(){
          return runners.base.index.should.eql(0);
        });
      });
      describe('next-index', function(){
        return specify('should be 1', function(){
          return runners.base.nextIndex().should.eql(1);
        });
      });
      describe('can-run-mw', function(){
        return specify('should be true', function(){
          return runners.base.canRunMw().should.be['true'];
        });
      });
      specify('should have assigned done-fun function', function(){
        return runners.base.onSuccess().should.eql(doneFun());
      });
      specify('should have assigned data', function(){
        return runners.base.context.data.should.eql('hello');
      });
      describe('run', function(){
        var result;
        before(function(){
          return result = runners.base.run();
        });
        describe('errors', function(){
          return specify('should be empty', function(){
            return runners.base.errors.should.eql({});
          });
        });
        describe('has-errors', function(){
          return specify('should be false', function(){
            return runners.base.hasErrors().should.be['false'];
          });
        });
        return specify('should return done-fun result', function(){
          return result.should.eql(doneFun());
        });
      });
      describe('add-result', function(){
        before(function(){
          runners.base.clean();
          return runners.base.addResult('a result');
        });
        return describe('results', function(){
          return specify('should have added the result', function(){
            return runners.base.results['base-mw'].should.eql('a result');
          });
        });
      });
      describe('results', function(){
        before(function(){
          runners.base.clean();
          return runners.base.run();
        });
        return specify('should be success (true)', function(){
          return runners.base.results['base-mw'].should.be['true'];
        });
      });
      describe('cause error', function(){
        var errors;
        before(function(){
          errors = {
            'error': 'oops!'
          };
          runners.base.clean();
          return runners.base.errors = errors;
        });
        describe('errors', function(){
          return specify('should not be empty', function(){
            return runners.base.errors.should.eql(errors);
          });
        });
        describe('has-errors', function(){
          return specify('should be true', function(){
            runners.base.errors.should.eql(errors);
            return runners.base.hasErrors().should.be['true'];
          });
        });
        return describe('result', function(){
          return specify('should return errors', function(){
            return runners.base.run().should.eql(errors);
          });
        });
      });
      describe('error', function(){
        return context('Mw-component run method causes error', function(){
          before(function(){
            mw.base = baseMw();
            runners.base.clean();
            runners.base.use(mw.base);
            mw.base.run = function(){
              return this.error('very bad stuff!');
            };
            return runners.base.run();
          });
          return specify('adds to runner errors', function(){
            return runners.base.errors['base-mw'].should.eql(['very bad stuff!']);
          });
        });
      });
      describe('abort', function(){
        return context('Mw-component run method causes error', function(){
          before(function(){
            mw.base = baseMw();
            mw.next = baseMw({
              name: 'next'
            });
            runners.base.clean();
            runners.base.use(mw.base).use(mw.next);
            mw.base.run = function(){
              return this.abort();
            };
            return runners.base.run();
          });
          specify('aborted is true', function(){
            return runners.base.aborted.should.be['true'];
          });
          specify('success is false', function(){
            return runners.base.success.should.be['false'];
          });
          specify('aborted-by is BaseMw', function(){
            return runners.base.abortedBy.should.eql('base-mw');
          });
          specify('index is still 0', function(){
            return runners.base.index.should.eql(0);
          });
          return specify('current-middleware is middleware which aborted: BaseMw', function(){
            return runners.base.currentMiddleware().name.should.eql('base-mw');
          });
        });
      });
      return describe('is-success', function(){
        return context('success is false', function(){
          before(function(){
            mw.base = baseMw();
            mw.next = baseMw({
              name: 'next'
            });
            runners.base.clean();
            runners.base.success = false;
            runners.base.use(mw.base).use(mw.next);
            return mw.base.run = function(){
              return this.successful();
            };
          });
          specify('success is false', function(){
            return runners.base.success.should.be['false'];
          });
          return context('runner is run', function(){
            before(function(){
              return runners.base.run();
            });
            return specify('success is true', function(){
              return runners.base.success.should.be['true'];
            });
          });
        });
      });
    });
  });
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

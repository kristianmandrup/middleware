// Generated by LiveScript 1.2.0
(function(){
  var _, requires, assert, expect, BaseMw, BaseRunner, Middleware;
  _ = require('prelude-ls');
  requires = require('../../requires');
  requires.test('test_setup');
  assert = require('chai').assert;
  expect = require('chai').expect;
  BaseMw = requires.file('mw/base_mw');
  BaseRunner = requires.file('runner/base_runner');
  Middleware = requires.file('middleware');
  describe('Middleware', function(){
    var ctx, middleware, doneFun, runners, mw;
    doneFun = function(){
      return 'done :)';
    };
    runners = {};
    mw = {};
    describe('class methods', function(){
      describe('default-runner', function(){
        return specify('is a BaseRunner', function(){
          return Middleware.defaultRunner().constructor.should.be.eql(BaseRunner);
        });
      });
      describe('runners', function(){
        return specify('is empty', function(){
          return Middleware.runners.should.eql({});
        });
      });
      return describe('register', function(){
        return context('register base: BaseRunner', function(){
          before(function(){
            return Middleware.register({
              base: BaseRunner
            });
          });
          return specify('registered BaseRunner as base', function(){
            return Middleware.runners.base.should.eql(BaseRunner);
          });
        });
      });
    });
    return describe('instance', function(){
      var runnerCtx;
      describe('create', function(){
        context('BaseRunner registered, by name', function(){
          before(function(){
            return middleware = new Middleware('base');
          });
          return describe('runner', function(){
            return specify('sets runner', function(){
              return middleware.runner.constructor.should.eql(BaseRunner);
            });
          });
        });
        context('BaseRunner with no mw components registered', function(){
          before(function(){
            runners.basic = new BaseRunner(runnerCtx);
            ctx = {
              runner: runners.basic
            };
            return middleware = new Middleware(ctx);
          });
          return describe('runner', function(){
            return specify('sets runner', function(){
              return middleware.runner.should.eql(runners.basic);
            });
          });
        });
        return context('using registered base and passing ctx', function(){
          before(function(){
            return middleware = new Middleware('base', {
              data: 'hello'
            });
          });
          return describe('runner', function(){
            specify('sets runner', function(){
              return middleware.runner.constructor.should.eql(BaseRunner);
            });
            specify('runner has context', function(){
              return middleware.runner.context.should.eql({
                data: 'hello'
              });
            });
            return specify('runner has context with data', function(){
              return middleware.runner.context.data.should.eql('hello');
            });
          });
        });
      });
      return describe('use', function(){
        context('using simple mw', function(){
          before(function(){
            mw.base = new BaseMw;
            return middleware.use(mw.base);
          });
          return describe('registered component', function(){
            specify('in registry middleware list', function(){
              return middleware.registry.middlewareList()[0].should.eql(mw.base);
            });
            return specify('in middlewares by name', function(){
              return middleware.registry.middlewares[mw.base.name].should.eql(mw.base);
            });
          });
        });
        context('using hash of mw-components', function(){
          before(function(){
            mw.base = new BaseMw;
            mw['super'] = new BaseMw({
              name: 'super-duper'
            });
            middleware.debugOn();
            middleware.runner.debugOn();
            return middleware.use({
              basic: mw.base,
              'super': mw['super']
            });
          });
          return describe('registry', function(){
            var registry;
            before(function(){
              return registry = middleware.runner.registry;
            });
            return describe('registered mw-components', function(){
              specify('should have basic BaseMw component', function(){
                return registry.get('basic').should.eql(mw.base);
              });
              return specify('should have super BaseMw component', function(){
                return registry.get('super').should.eql(mw['super']);
              });
            });
          });
        });
        context('using chain of mw-components', function(){
          before(function(){
            mw.base = new BaseMw;
            mw['super'] = new BaseMw({
              name: 'super-duper'
            });
            middleware.registry.clean();
            return middleware.use(mw.base).use(mw['super']);
          });
          return describe('registry', function(){
            var registry;
            before(function(){
              return registry = middleware.runner.registry;
            });
            return describe('registered mw-components', function(){
              specify('should have basic BaseMw components in register', function(){
                return registry.get('base-mw').should.eql(mw.base);
              });
              return specify('should have super BaseMw components in register', function(){
                return registry.get('super-duper').should.eql(mw['super']);
              });
            });
          });
        });
        return context('using list of mw-components', function(){
          before(function(){
            mw.base = new BaseMw;
            mw['super'] = new BaseMw({
              name: 'super-duper'
            });
            middleware.registry.clean();
            return middleware.use(mw.base, mw['super']);
          });
          describe('registry', function(){
            var registry;
            before(function(){
              return registry = middleware.runner.registry;
            });
            return describe('registered mw-components', function(){
              specify('should have basic BaseMw components in register', function(){
                return registry.get('base-mw').should.eql(mw.base);
              });
              return specify('should have super BaseMw components in register', function(){
                return registry.get('super-duper').should.eql(mw['super']);
              });
            });
          });
          return describe('run', function(){
            var runner;
            before(function(){
              mw.base = new BaseMw;
              middleware.use(mw.base);
              runner = middleware.runner;
              runner.onSuccess = doneFun;
              return runner.clean();
            });
            describe('runner', function(){
              before(function(){
                return runner.clean();
              });
              specify('has set on-success', function(){
                return runner.onSuccess.should.eql(doneFun);
              });
              describe('index', function(){
                return specify('is 0', function(){
                  return runner.index.should.eql(0);
                });
              });
              describe('middleware-list', function(){
                return specify('is not empty', function(){
                  return runner.middlewareList().should.not.eql([]);
                });
              });
              return describe('can-run-mw', function(){
                return specify('it has', function(){
                  return runner.canRunMw().should.be['true'];
                });
              });
            });
            specify('returns result of done-fun', function(){
              return middleware.run().should.eql(doneFun());
            });
            return describe('results', function(){
              before(function(){
                return middleware.run();
              });
              specify('is not empty', function(){
                return middleware.results().should.not.be.empty;
              });
              return specify('set by name of component', function(){
                return middleware.results()['base-mw'].should.eql(true);
              });
            });
          });
        });
      });
    });
  });
}).call(this);

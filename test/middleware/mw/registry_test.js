// Generated by LiveScript 1.2.0
(function(){
  var _, requires, BaseMw, BaseRunner, MiddlewareRegistry, assert, expect;
  _ = require('prelude-ls');
  requires = require('../../../requires');
  requires.test('test_setup');
  BaseMw = requires.file('mw/base_mw');
  BaseRunner = requires.file('runner/base_runner');
  MiddlewareRegistry = requires.file('mw/registry');
  assert = require('chai').assert;
  expect = require('chai').expect;
  describe('MiddlewareRegistry', function(){
    var ctx, doneFun, registries, mw, registry, baseMw;
    doneFun = function(){
      return 'done :)';
    };
    registries = {};
    mw = {};
    registry = function(){
      return new MiddlewareRegistry;
    };
    baseMw = function(ctx){
      return new BaseMw(ctx);
    };
    return context('empty registry', function(){
      before(function(){
        return registries.empty = registry();
      });
      describe('instance', function(){
        return specify('is a MiddlewareRegistry', function(){
          return registries.empty.constructor.should.be.eql(MiddlewareRegistry);
        });
      });
      describe('middlewares', function(){
        return specify('is empty object', function(){
          return registries.empty.middlewares.should.be.eql({});
        });
      });
      describe('middleware-list', function(){
        return specify('is empty', function(){
          return registries.empty.middlewareList().should.be.eql([]);
        });
      });
      describe('get', function(){
        return specify('returns void', function(){
          return expect(registries.empty.get('base-mw')).to.equal(void 8);
        });
      });
      describe('at', function(){
        return specify('returns void', function(){
          return expect(registries.empty.at(0)).to.equal(void 8);
        });
      });
      return describe('register', function(){
        context('registered BaseMw component (no name)', function(){
          before(function(){
            ctx = {
              data: {}
            };
            mw.base = baseMw(ctx);
            registries.base = registry();
            return registries.base.register(mw.base);
          });
          describe('middlewares', function(){
            return specify('BaseMw is registered by classname: BaseMw', function(){
              return registries.base.get('base-mw').should.be.eql(mw.base);
            });
          });
          return describe('middleware-list', function(){
            return specify('has one item', function(){
              return registries.base.middlewareList().length.should.eql(1);
            });
          });
        });
        describe('get', function(){
          specify('returns BaseMw mw component', function(){
            return registries.base.get('base-mw').should.eql(mw.base);
          });
          return specify('throws Error on bad name', function(){
            return expect(function(){
              return registries.base.get('base-mOw');
            }).to['throw'];
          });
        });
        describe('get-mapped', function(){
          specify('returns BaseMw mw component', function(){
            return registries.base.getMapped('base-mw').should.eql(mw.base);
          });
          return specify('throws Error when not a mapped component', function(){
            return expect(function(){
              return registries.base.getMapped('base-mOw');
            }).to['throw'];
          });
        });
        return describe('at', function(){
          specify('returns BaseMw mw component', function(){
            return registries.base.at(0).should.eql(mw.base);
          });
          return specify('throws Error on bad index', function(){
            return expect(function(){
              return registries.base.at(-1);
            }).to['throw'];
          });
        });
      });
    });
  });
}).call(this);

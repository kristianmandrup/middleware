// Generated by LiveScript 1.2.0
/**
 * User: kmandrup
 * Date: 16/02/14
 * Time: 18:53
 */
(function(){
  var _, lo, requires, Debugger, MiddlewareRegistry, AsyncRunner;
  _ = require('prelude-ls');
  lo = require('lodash');
  requires = require('../requires');
  require('sugar');
  Debugger = requires.file('debugger');
  MiddlewareRegistry = requires.file('mw/registry');
  module.exports = AsyncRunner = (function(superclass){
    var prototype = extend$((import$(AsyncRunner, superclass).displayName = 'AsyncRunner', AsyncRunner), superclass).prototype, constructor = AsyncRunner;
    function AsyncRunner(context){
      this.context = context;
      AsyncRunner.superclass.apply(this, arguments);
    }
    AsyncRunner.deferFun = function(){
      return Q.defer;
    };
    prototype.run = function(ctx){
      this.debug('run', ctx);
      if (this.canRunMw()) {
        this.runMw(ctx);
      }
      return this.result();
    };
    prototype.canRunMw = function(){
      if (this.aborted) {
        return false;
      }
      return this.middlewareList().length > this.index;
    };
    prototype.runMw = function(ctx){
      var result;
      result = this.currentMwResult(ctx);
      if (this.aborted) {
        return false;
      }
      this.addResult(result);
      this.incIndex();
      return this.run();
    };
    prototype.currentMwResult = function(ctx){
      var res;
      res = this.runCurrentMw(ctx);
      switch (res) {
      case void 8:
        return this.currentMw().result;
      default:
        return res;
      }
    };
    return AsyncRunner;
  }(BaseRunner));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
